{"ast":null,"code":"export function random_food() {\n  let foodChoices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"chicken rice\", \"laksa\", \"prata\", \"pasta\", \"cai fan\", \"thai food\", \"KBBQ\", \"ramen\", \"mala xiang guo\", \"yong tau foo\"];\n  const randInt = Math.floor(Math.random() * foodChoices.length);\n  const choice = foodChoices[randInt];\n  return choice;\n}\nexport function convertFiltersFormat(filters) {\n  //example format of input:\n  // {\n  //     fried: \"yes\"\n  //     halal: \"either\"\n  //     hot: \"either\"\n  //     shared: \"yes\"\n  //     soup: \"either\"\n  //     spicy: \"either\"\n  //     vegetarian: \"either\"\n  // }\n  //example format of output:\n  // format of req data\n  // {\n  //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\n  //     \"values\": [true, false, true]\n  // }\n  for (let key of Object.keys(filters)) {\n    if (filters[key] === 'either') {\n      delete filters[key];\n    }\n  }\n\n  return {\n    \"filters\": Object.keys(filters),\n    \"values\": Object.values(filters)\n  };\n}\nexport async function getPlaces(keyword, lat, lon) {\n  try {\n    let req = {\n      \"search\": keyword,\n      \"lat\": lat,\n      \"lon\": lon\n    }; // console.log(req)\n\n    const response = await fetch(\"http://localhost:5000/places\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(req)\n    });\n    const body = await response.json();\n    let places = [];\n\n    for (let place in body) {\n      places.push(body[place]);\n    }\n\n    return places;\n  } catch (err) {\n    console.error(err.message);\n  }\n}","map":{"version":3,"sources":["C:/Users/Zephy/OneDrive/Documents/Personal/Coding/Coding Projects/WhatoEat/src/utils/utils.js"],"names":["random_food","foodChoices","randInt","Math","floor","random","length","choice","convertFiltersFormat","filters","key","Object","keys","values","getPlaces","keyword","lat","lon","req","response","fetch","method","headers","body","JSON","stringify","json","places","place","push","err","console","error","message"],"mappings":"AAAA,OAAO,SAASA,WAAT,GAAyJ;AAAA,MAApIC,WAAoI,uEAAxH,CAAC,cAAD,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,WAAvD,EAAoE,MAApE,EAA4E,OAA5E,EAAqF,gBAArF,EAAuG,cAAvG,CAAwH;AAC5J,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcJ,WAAW,CAACK,MAArC,CAAhB;AACA,QAAMC,MAAM,GAAGN,WAAW,CAACC,OAAD,CAA1B;AACA,SAAOK,MAAP;AACH;AAED,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAhB,EAAsC;AAClC,QAAIA,OAAO,CAACC,GAAD,CAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAOD,OAAO,CAACC,GAAD,CAAd;AACH;AACJ;;AACD,SAAO;AAAC,eAAWC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAZ;AAAkC,cAAUE,MAAM,CAACE,MAAP,CAAcJ,OAAd;AAA5C,GAAP;AACH;AAED,OAAO,eAAeK,SAAf,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4C;AAC/C,MAAI;AACA,QAAIC,GAAG,GAAG;AAAC,gBAAUH,OAAX;AAAoB,aAAOC,GAA3B;AAAgC,aAAOC;AAAvC,KAAV,CADA,CAEA;;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,EAAiC;AAACC,MAAAA,MAAM,EAAE,MAAT;AAAiBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAA1B;AAAkEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,GAAf;AAAxE,KAAjC,CAA5B;AACA,UAAMK,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAAnB;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,KAAT,IAAkBL,IAAlB,EAAwB;AACpBI,MAAAA,MAAM,CAACE,IAAP,CAAYN,IAAI,CAACK,KAAD,CAAhB;AACH;;AACD,WAAOD,MAAP;AACH,GAVD,CAWA,OAAOG,GAAP,EAAY;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACH;AAEJ","sourcesContent":["export function random_food(foodChoices=[\"chicken rice\", \"laksa\", \"prata\", \"pasta\", \"cai fan\", \"thai food\", \"KBBQ\", \"ramen\", \"mala xiang guo\", \"yong tau foo\"]) {\r\n    const randInt = Math.floor(Math.random()*foodChoices.length)\r\n    const choice = foodChoices[randInt]\r\n    return choice\r\n}\r\n\r\nexport function convertFiltersFormat(filters) {\r\n    //example format of input:\r\n    // {\r\n    //     fried: \"yes\"\r\n    //     halal: \"either\"\r\n    //     hot: \"either\"\r\n    //     shared: \"yes\"\r\n    //     soup: \"either\"\r\n    //     spicy: \"either\"\r\n    //     vegetarian: \"either\"\r\n    // }\r\n\r\n    //example format of output:\r\n    // format of req data\r\n    // {\r\n    //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\r\n    //     \"values\": [true, false, true]\r\n    // }\r\n    \r\n    for (let key of Object.keys(filters)) {\r\n        if (filters[key] === 'either') {\r\n            delete filters[key];\r\n        }\r\n    }\r\n    return {\"filters\": Object.keys(filters), \"values\": Object.values(filters)}\r\n}\r\n\r\nexport async function getPlaces(keyword, lat, lon) {\r\n    try {\r\n        let req = {\"search\": keyword, \"lat\": lat, \"lon\": lon}\r\n        // console.log(req)\r\n        const response = await fetch(\"http://localhost:5000/places\", {method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(req)});\r\n        const body = await response.json()\r\n        let places = []\r\n        for (let place in body) {\r\n            places.push(body[place])\r\n        }\r\n        return places\r\n    }\r\n    catch (err) {\r\n        console.error(err.message)\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}