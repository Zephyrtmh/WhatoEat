{"ast":null,"code":"export async function random_food() {\n  let foodChoices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  async function getFood() {\n    if (foodChoices.length === 0) {\n      const response = await fetch(\"/food\");\n      const foodChoicesObj = await response.json();\n      const allFood = Object.values(foodChoicesObj);\n      return allFood;\n    } else {\n      return foodChoices;\n    }\n  }\n\n  foodChoices = await getFood();\n  const randInt = Math.floor(Math.random() * foodChoices.length);\n  const choice = foodChoices[randInt];\n  console.log(\"choice: \", choice);\n  return choice;\n}\nexport function convertFiltersFormat(filters) {\n  //example format of input:\n  // {\n  //     fried: \"yes\"\n  //     halal: \"either\"\n  //     hot: \"either\"\n  //     shared: \"yes\"\n  //     soup: \"either\"\n  //     spicy: \"either\"\n  //     vegetarian: \"either\"\n  // }\n  //example format of output:\n  // format of req data\n  // {\n  //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\n  //     \"values\": [true, false, true]\n  // }\n  for (let key of Object.keys(filters)) {\n    if (filters[key] === 'either') {\n      delete filters[key];\n    }\n  }\n\n  return {\n    \"filters\": Object.keys(filters),\n    \"values\": Object.values(filters)\n  };\n}\nexport async function getPlaces(keyword, lat, lng) {\n  try {\n    let req = {\n      \"search\": keyword,\n      \"lat\": lat,\n      \"lng\": lng\n    }; // console.log(req)\n\n    const response = await fetch(\"/places\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(req)\n    });\n    const body = await response.json();\n    let places = [];\n\n    for (let place in body) {\n      places.push(body[place]);\n    }\n\n    console.log(places);\n    return places;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\nexport function filterShops(filterBy, shopsList, currLoc) {\n  switch (filterBy) {\n    case \"default\":\n      console.log(\"filter shops by default\");\n      return shopsList;\n\n    case \"rating\":\n      console.log(\"filter shops by ratings\");\n      shopsList.sort((first, second) => {\n        return second[\"rating\"] - first[\"rating\"];\n      });\n      console.log(\"new rating sorted list\");\n      console.log(shopsList);\n      return shopsList;\n\n    case \"distance\":\n      console.log(\"filter shops by distance\");\n      console.log(currLoc);\n      shopsList.sort((first, second) => {\n        console.log(second['geometry']['location'], first['geometry']['location']);\n        let dist2 = calcDist(currLoc, second['geometry']['location']);\n        let dist1 = calcDist(currLoc, first['geometry']['location']);\n        console.log(dist2, dist1);\n        return dist1 - dist2;\n      });\n      console.log(\"new distance sorted list\");\n      console.log(shopsList);\n      return shopsList;\n  }\n\n  return shopsList;\n}\nexport function calcDist(curr, dest) {\n  let currLat = curr.lat;\n  let currLng = curr.lng;\n  let destLat = dest.lat;\n  let destLng = dest.lng; //convert to Radians\n\n  currLat = currLat / (180 / Math.PI);\n  destLat = destLat / (180 / Math.PI);\n  currLng = currLng / (180 / Math.PI);\n  destLng = destLng / (180 / Math.PI);\n  const diffLat = destLat - currLat;\n  const diffLng = destLng - currLng; //radius of Earth in KM = 6371\n  //Very loooooong formula to calculate distance that I definitely did not google for\n\n  const distance = 6371 * 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(diffLat / 2), 2) + Math.cos(currLat) * Math.cos(destLat) * Math.pow(Math.sin(diffLng / 2), 2)));\n  return distance;\n}","map":{"version":3,"names":["random_food","foodChoices","getFood","length","response","fetch","foodChoicesObj","json","allFood","Object","values","randInt","Math","floor","random","choice","console","log","convertFiltersFormat","filters","key","keys","getPlaces","keyword","lat","lng","req","method","headers","body","JSON","stringify","places","place","push","err","error","message","filterShops","filterBy","shopsList","currLoc","sort","first","second","dist2","calcDist","dist1","curr","dest","currLat","currLng","destLat","destLng","PI","diffLat","diffLng","distance","asin","sqrt","pow","sin","cos"],"sources":["C:/Users/Zephy/OneDrive/Documents/Personal/Coding/Coding Projects/WhatoEat/client/src/utils/utils.js"],"sourcesContent":["export async function random_food(foodChoices=[]) {\r\n    async function getFood() {\r\n        if (foodChoices.length === 0) {\r\n            const response = await fetch(\"/food\");\r\n            const foodChoicesObj = await response.json();\r\n            const allFood = Object.values(foodChoicesObj);\r\n            return allFood\r\n        } else {\r\n            return foodChoices\r\n        }\r\n        \r\n    }\r\n    foodChoices = await getFood();\r\n    const randInt = Math.floor(Math.random()*foodChoices.length);\r\n    const choice = foodChoices[randInt];\r\n    console.log(\"choice: \", choice)\r\n    return choice\r\n}\r\n\r\nexport function convertFiltersFormat(filters) {\r\n    //example format of input:\r\n    // {\r\n    //     fried: \"yes\"\r\n    //     halal: \"either\"\r\n    //     hot: \"either\"\r\n    //     shared: \"yes\"\r\n    //     soup: \"either\"\r\n    //     spicy: \"either\"\r\n    //     vegetarian: \"either\"\r\n    // }\r\n\r\n    //example format of output:\r\n    // format of req data\r\n    // {\r\n    //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\r\n    //     \"values\": [true, false, true]\r\n    // }\r\n    \r\n    for (let key of Object.keys(filters)) {\r\n        if (filters[key] === 'either') {\r\n            delete filters[key];\r\n        }\r\n    }\r\n    return {\"filters\": Object.keys(filters), \"values\": Object.values(filters)}\r\n}\r\n\r\nexport async function getPlaces(keyword, lat, lng) {\r\n    try {\r\n        let req = {\"search\": keyword, \"lat\": lat, \"lng\": lng}\r\n        // console.log(req)\r\n        const response = await fetch(\"/places\", {method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(req)});\r\n        const body = await response.json()\r\n        let places = []\r\n        for (let place in body) {\r\n            places.push(body[place])\r\n        }\r\n        console.log(places)\r\n        return places\r\n    }\r\n    catch (err) {\r\n        console.error(err.message)\r\n    }\r\n    \r\n}\r\n\r\nexport function filterShops(filterBy, shopsList, currLoc) {\r\n    switch(filterBy) {\r\n        case \"default\":\r\n            console.log(\"filter shops by default\")\r\n            return shopsList\r\n\r\n        case \"rating\":\r\n            console.log(\"filter shops by ratings\")\r\n            shopsList.sort((first, second) => {\r\n                return second[\"rating\"] - first[\"rating\"]\r\n            })\r\n            console.log(\"new rating sorted list\")\r\n            console.log(shopsList)\r\n            return shopsList\r\n\r\n        case \"distance\":\r\n            console.log(\"filter shops by distance\")\r\n            console.log(currLoc)\r\n            shopsList.sort((first, second) => {\r\n                console.log(second['geometry']['location'], first['geometry']['location'])\r\n                let dist2 = calcDist(currLoc, second['geometry']['location']);\r\n                let dist1 = calcDist(currLoc, first['geometry']['location']);\r\n                console.log(dist2, dist1)\r\n                return dist1 - dist2\r\n            })\r\n            console.log(\"new distance sorted list\")\r\n            console.log(shopsList)\r\n            return shopsList\r\n    } \r\n    \r\n    return shopsList\r\n}\r\n\r\n\r\n\r\nexport function calcDist(curr, dest) {\r\n    let currLat = curr.lat;\r\n    let currLng = curr.lng;\r\n    let destLat = dest.lat;\r\n    let destLng = dest.lng;\r\n    //convert to Radians\r\n    currLat = currLat/(180/Math.PI);\r\n    destLat = destLat/(180/Math.PI);\r\n    currLng = currLng/(180/Math.PI);\r\n    destLng = destLng/(180/Math.PI);\r\n\r\n    const diffLat = destLat - currLat;\r\n    const diffLng = destLng - currLng;\r\n    //radius of Earth in KM = 6371\r\n    //Very loooooong formula to calculate distance that I definitely did not google for\r\n    const distance = 6371 * 2* Math.asin(Math.sqrt(Math.pow(Math.sin(diffLat/2),2) + Math.cos(currLat) * Math.cos(destLat) * Math.pow(Math.sin(diffLng / 2), 2)));\r\n    return distance\r\n}   "],"mappings":"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"},"metadata":{},"sourceType":"module"}