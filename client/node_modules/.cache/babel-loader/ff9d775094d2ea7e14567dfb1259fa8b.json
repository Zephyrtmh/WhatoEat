{"ast":null,"code":"export function random_food() {\n  let foodChoices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"chicken rice\", \"laksa\", \"prata\", \"pasta\", \"cai fan\", \"thai food\", \"KBBQ\", \"ramen\", \"mala xiang guo\", \"yong tau foo\"];\n  const randInt = Math.floor(Math.random() * foodChoices.length);\n  const choice = foodChoices[randInt];\n  return choice;\n}\nexport function convertFiltersFormat(filters) {\n  //example format of input:\n  // {\n  //     fried: \"yes\"\n  //     halal: \"either\"\n  //     hot: \"either\"\n  //     shared: \"yes\"\n  //     soup: \"either\"\n  //     spicy: \"either\"\n  //     vegetarian: \"either\"\n  // }\n  //example format of output:\n  // format of req data\n  // {\n  //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\n  //     \"values\": [true, false, true]\n  // }\n  for (let key of Object.keys(filters)) {\n    if (filters[key] === 'either') {\n      delete filters[key];\n    }\n  }\n\n  return {\n    \"filters\": Object.keys(filters),\n    \"values\": Object.values(filters)\n  };\n}\nexport async function getPlaces(keyword, lat, lng) {\n  try {\n    let req = {\n      \"search\": keyword,\n      \"lat\": lat,\n      \"lng\": lng\n    }; // console.log(req)\n\n    const response = await fetch(\"http://localhost:5000/places\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(req)\n    });\n    const body = await response.json();\n    let places = [];\n\n    for (let place in body) {\n      places.push(body[place]);\n    }\n\n    console.log(places);\n    return places;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\nexport function filterShops(filterBy, shopsList, currLoc) {\n  switch (filterBy) {\n    case \"default\":\n      console.log(\"filter shops by default\");\n      return shopsList;\n\n    case \"rating\":\n      console.log(\"filter shops by ratings\");\n      shopsList.sort((first, second) => {\n        return second[\"rating\"] - first[\"rating\"];\n      });\n      console.log(\"new rating sorted list\");\n      console.log(shopsList);\n      return shopsList;\n\n    case \"distance\":\n      console.log(\"filter shops by distance\");\n      console.log(currLoc);\n      shopsList.sort((first, second) => {\n        console.log(second['geometry']['location'], first['geometry']['location']);\n        let dist2 = calcDist(currLoc, second['geometry']['location']);\n        let dist1 = calcDist(currLoc, first['geometry']['location']);\n        console.log(dist2, dist1);\n        return dist1 - dist2;\n      });\n      console.log(\"new distance sorted list\");\n      console.log(shopsList);\n      return shopsList;\n  }\n\n  return shopsList;\n}\nexport function calcDist(curr, dest) {\n  let currLat = curr.lat;\n  let currLng = curr.lng;\n  let destLat = dest.lat;\n  let destLng = dest.lng; //convert to Radians\n\n  currLat = currLat / (180 / Math.PI);\n  destLat = destLat / (180 / Math.PI);\n  currLng = currLng / (180 / Math.PI);\n  destLng = destLng / (180 / Math.PI);\n  const diffLat = destLat - currLat;\n  const diffLng = destLng - currLng; //radius of Earth in KM = 6371\n  //Very loooooong formula to calculate distance that I definitely did not google for\n\n  const distance = 6371 * 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(diffLat / 2), 2) + Math.cos(currLat) * Math.cos(destLat) * Math.pow(Math.sin(diffLng / 2), 2)));\n  return distance;\n}","map":{"version":3,"sources":["C:/Users/Zephy/OneDrive/Documents/Personal/Coding/Coding Projects/WhatoEat/src/utils/utils.js"],"names":["random_food","foodChoices","randInt","Math","floor","random","length","choice","convertFiltersFormat","filters","key","Object","keys","values","getPlaces","keyword","lat","lng","req","response","fetch","method","headers","body","JSON","stringify","json","places","place","push","console","log","err","error","message","filterShops","filterBy","shopsList","currLoc","sort","first","second","dist2","calcDist","dist1","curr","dest","currLat","currLng","destLat","destLng","PI","diffLat","diffLng","distance","asin","sqrt","pow","sin","cos"],"mappings":"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","sourcesContent":["export function random_food(foodChoices=[\"chicken rice\", \"laksa\", \"prata\", \"pasta\", \"cai fan\", \"thai food\", \"KBBQ\", \"ramen\", \"mala xiang guo\", \"yong tau foo\"]) {\r\n    const randInt = Math.floor(Math.random()*foodChoices.length)\r\n    const choice = foodChoices[randInt]\r\n    return choice\r\n}\r\n\r\nexport function convertFiltersFormat(filters) {\r\n    //example format of input:\r\n    // {\r\n    //     fried: \"yes\"\r\n    //     halal: \"either\"\r\n    //     hot: \"either\"\r\n    //     shared: \"yes\"\r\n    //     soup: \"either\"\r\n    //     spicy: \"either\"\r\n    //     vegetarian: \"either\"\r\n    // }\r\n\r\n    //example format of output:\r\n    // format of req data\r\n    // {\r\n    //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\r\n    //     \"values\": [true, false, true]\r\n    // }\r\n    \r\n    for (let key of Object.keys(filters)) {\r\n        if (filters[key] === 'either') {\r\n            delete filters[key];\r\n        }\r\n    }\r\n    return {\"filters\": Object.keys(filters), \"values\": Object.values(filters)}\r\n}\r\n\r\nexport async function getPlaces(keyword, lat, lng) {\r\n    try {\r\n        let req = {\"search\": keyword, \"lat\": lat, \"lng\": lng}\r\n        // console.log(req)\r\n        const response = await fetch(\"http://localhost:5000/places\", {method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(req)});\r\n        const body = await response.json()\r\n        let places = []\r\n        for (let place in body) {\r\n            places.push(body[place])\r\n        }\r\n        console.log(places)\r\n        return places\r\n    }\r\n    catch (err) {\r\n        console.error(err.message)\r\n    }\r\n    \r\n}\r\n\r\nexport function filterShops(filterBy, shopsList, currLoc) {\r\n    switch(filterBy) {\r\n        case \"default\":\r\n            console.log(\"filter shops by default\")\r\n            return shopsList\r\n\r\n        case \"rating\":\r\n            console.log(\"filter shops by ratings\")\r\n            shopsList.sort((first, second) => {\r\n                return second[\"rating\"] - first[\"rating\"]\r\n            })\r\n            console.log(\"new rating sorted list\")\r\n            console.log(shopsList)\r\n            return shopsList\r\n\r\n        case \"distance\":\r\n            console.log(\"filter shops by distance\")\r\n            console.log(currLoc)\r\n            shopsList.sort((first, second) => {\r\n                console.log(second['geometry']['location'], first['geometry']['location'])\r\n                let dist2 = calcDist(currLoc, second['geometry']['location']);\r\n                let dist1 = calcDist(currLoc, first['geometry']['location']);\r\n                console.log(dist2, dist1)\r\n                return dist1 - dist2\r\n            })\r\n            console.log(\"new distance sorted list\")\r\n            console.log(shopsList)\r\n            return shopsList\r\n    } \r\n    \r\n    return shopsList\r\n}\r\n\r\n\r\n\r\nexport function calcDist(curr, dest) {\r\n    let currLat = curr.lat;\r\n    let currLng = curr.lng;\r\n    let destLat = dest.lat;\r\n    let destLng = dest.lng;\r\n    //convert to Radians\r\n    currLat = currLat/(180/Math.PI);\r\n    destLat = destLat/(180/Math.PI);\r\n    currLng = currLng/(180/Math.PI);\r\n    destLng = destLng/(180/Math.PI);\r\n\r\n    const diffLat = destLat - currLat;\r\n    const diffLng = destLng - currLng;\r\n    //radius of Earth in KM = 6371\r\n    //Very loooooong formula to calculate distance that I definitely did not google for\r\n    const distance = 6371 * 2* Math.asin(Math.sqrt(Math.pow(Math.sin(diffLat/2),2) + Math.cos(currLat) * Math.cos(destLat) * Math.pow(Math.sin(diffLng / 2), 2)));\r\n    return distance\r\n}   "]},"metadata":{},"sourceType":"module"}