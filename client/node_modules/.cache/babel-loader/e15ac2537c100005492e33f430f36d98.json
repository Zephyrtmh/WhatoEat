{"ast":null,"code":"export function random_food() {\n  let foodChoices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"chicken rice\", \"laksa\", \"prata\", \"pasta\", \"cai fan\", \"thai food\", \"KBBQ\", \"ramen\", \"mala xiang guo\", \"yong tau foo\"];\n  const randInt = Math.floor(Math.random() * foodChoices.length);\n  const choice = foodChoices[randInt];\n  return choice;\n}\nexport function convertFiltersFormat(filters) {\n  //example format of input:\n  // {\n  //     fried: \"yes\"\n  //     halal: \"either\"\n  //     hot: \"either\"\n  //     shared: \"yes\"\n  //     soup: \"either\"\n  //     spicy: \"either\"\n  //     vegetarian: \"either\"\n  // }\n  //example format of output:\n  // format of req data\n  // {\n  //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\n  //     \"values\": [true, false, true]\n  // }\n  for (let key of Object.keys(filters)) {\n    if (filters[key] === 'either') {\n      delete filters[key];\n    }\n  }\n\n  return {\n    \"filters\": Object.keys(filters),\n    \"values\": Object.values(filters)\n  };\n}\nexport async function getCurrLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(persmissionGiven);\n  } else {\n    console.log(\"geolocation not available\");\n  }\n\n  function persmissionGiven(position) {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    console.log(lat, lon);\n    return {\n      \"lat\": lat,\n      \"lon\": lon\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/Zephy/OneDrive/Documents/Personal/Coding/Coding Projects/WhatoEat/src/utils/utils.js"],"names":["random_food","foodChoices","randInt","Math","floor","random","length","choice","convertFiltersFormat","filters","key","Object","keys","values","getCurrLocation","navigator","geolocation","getCurrentPosition","persmissionGiven","console","log","position","lat","coords","latitude","lon","longitude"],"mappings":"AAAA,OAAO,SAASA,WAAT,GAAyJ;AAAA,MAApIC,WAAoI,uEAAxH,CAAC,cAAD,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,WAAvD,EAAoE,MAApE,EAA4E,OAA5E,EAAqF,gBAArF,EAAuG,cAAvG,CAAwH;AAC5J,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcJ,WAAW,CAACK,MAArC,CAAhB;AACA,QAAMC,MAAM,GAAGN,WAAW,CAACC,OAAD,CAA1B;AACA,SAAOK,MAAP;AACH;AAED,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAhB,EAAsC;AAClC,QAAIA,OAAO,CAACC,GAAD,CAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAOD,OAAO,CAACC,GAAD,CAAd;AACH;AACJ;;AACD,SAAO;AAAC,eAAWC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAZ;AAAkC,cAAUE,MAAM,CAACE,MAAP,CAAcJ,OAAd;AAA5C,GAAP;AACH;AAED,OAAO,eAAeK,eAAf,GAAiC;AACpC,MAAIC,SAAS,CAACC,WAAd,EAA2B;AACvBD,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,gBAAzC;AACH,GAFD,MAEO;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH;;AACD,WAASF,gBAAT,CAA0BG,QAA1B,EAAoC;AAChC,QAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B;AACA,QAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA1B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAAiBG,GAAjB;AACA,WAAO;AAAE,aAAOH,GAAT;AAAc,aAAQG;AAAtB,KAAP;AACH;AACJ","sourcesContent":["export function random_food(foodChoices=[\"chicken rice\", \"laksa\", \"prata\", \"pasta\", \"cai fan\", \"thai food\", \"KBBQ\", \"ramen\", \"mala xiang guo\", \"yong tau foo\"]) {\r\n    const randInt = Math.floor(Math.random()*foodChoices.length)\r\n    const choice = foodChoices[randInt]\r\n    return choice\r\n}\r\n\r\nexport function convertFiltersFormat(filters) {\r\n    //example format of input:\r\n    // {\r\n    //     fried: \"yes\"\r\n    //     halal: \"either\"\r\n    //     hot: \"either\"\r\n    //     shared: \"yes\"\r\n    //     soup: \"either\"\r\n    //     spicy: \"either\"\r\n    //     vegetarian: \"either\"\r\n    // }\r\n\r\n    //example format of output:\r\n    // format of req data\r\n    // {\r\n    //     \"filters\": [\"soup\", \"halal\", \"spicy\"],\r\n    //     \"values\": [true, false, true]\r\n    // }\r\n    \r\n    for (let key of Object.keys(filters)) {\r\n        if (filters[key] === 'either') {\r\n            delete filters[key];\r\n        }\r\n    }\r\n    return {\"filters\": Object.keys(filters), \"values\": Object.values(filters)}\r\n}\r\n\r\nexport async function getCurrLocation() {\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(persmissionGiven);\r\n    } else {\r\n        console.log(\"geolocation not available\")\r\n    }\r\n    function persmissionGiven(position) {\r\n        let lat = position.coords.latitude;\r\n        let lon = position.coords.longitude;\r\n        console.log(lat, lon);\r\n        return { \"lat\": lat, \"lon\":  lon}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}