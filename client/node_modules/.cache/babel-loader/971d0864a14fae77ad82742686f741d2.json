{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zephy\\\\OneDrive\\\\Documents\\\\Personal\\\\Coding\\\\Coding Projects\\\\WhatoEat\\\\src\\\\components\\\\ListFilters.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport Filter from './Filter';\nimport { FoodContext } from '../Context/FoodContext';\nimport { convertFiltersFormat } from '../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListFilters(props) {\n  _s();\n\n  const [filterAllList, setFilterList] = useState([]);\n  const [toFilter, setToFilter] = useState(true);\n  const [activeFilters, setActiveFilters] = useState({\n    \"halal\": 'either'\n  });\n  let context = useContext(FoodContext);\n\n  const getFilters = async () => {\n    try {\n      // need to add check to prevent infinite loop\n      const response = await fetch(\"http://localhost:5000/filters/\");\n      const jsonData = await response.json();\n      const filters = jsonData.map(filter => /*#__PURE__*/_jsxDEV(\"li\", {\n        id: filter,\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          filterName: filter.filter_name,\n          toFilter: toFilter,\n          handleFilterSelection: handleFilterSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this));\n      setFilterList(filters);\n      let someObj = {};\n      await jsonData.forEach(async element => {\n        someObj[element.filter_name] = 'either'; // activeFilters[element.food_name] = 'either';\n      }); // console.log(someObj);\n\n      setActiveFilters(someObj);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleFilterSelection = (filterName, value) => {\n    activeFilters[filterName] = value;\n    setActiveFilters(activeFilters);\n  };\n\n  const handleNoFilter = () => {\n    setToFilter(!toFilter);\n    console.log(\"toFilter set to \" + !toFilter);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const convertedActiveFilters = convertFiltersFormat(activeFilters);\n      const response = await fetch(\"http://localhost:5000/submit\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(convertedActiveFilters)\n      });\n      let resJson = response.json(); // let foodNames = resJson.map((foodName) => console.log(foodName));\n\n      await resJson.then(data => {\n        let food_names = [];\n\n        for (let food in data) {\n          food_names.push(data[food].food_name);\n        }\n\n        console.log(food_names);\n        context.setFoodItem(food_names);\n      });\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  const foodContext = /*#__PURE__*/React.createContext('');\n  let foodFilters = [];\n  useEffect(() => {\n    getFilters();\n  }, [toFilter]);\n  let noFilterClassName = toFilter ? \"no-filter-button-unselected\" : \"no-filter-button-selected\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"filters-interface-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: noFilterClassName,\n      onClick: handleNoFilter,\n      children: \"No filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"filter-list\",\n      children: filterAllList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListFilters, \"CEP+HVCrzZjdX30MwMio03HVCpE=\");\n\n_c = ListFilters;\nexport default ListFilters;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListFilters\");","map":{"version":3,"sources":["C:/Users/Zephy/OneDrive/Documents/Personal/Coding/Coding Projects/WhatoEat/src/components/ListFilters.js"],"names":["React","useContext","useEffect","useRef","useState","Filter","FoodContext","convertFiltersFormat","ListFilters","props","filterAllList","setFilterList","toFilter","setToFilter","activeFilters","setActiveFilters","context","getFilters","response","fetch","jsonData","json","filters","map","filter","filter_name","handleFilterSelection","someObj","forEach","element","err","console","error","filterName","value","handleNoFilter","log","handleSubmit","convertedActiveFilters","method","headers","body","JSON","stringify","resJson","then","data","food_names","food","push","food_name","setFoodItem","message","foodContext","createContext","foodFilters","noFilterClassName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport Filter from './Filter';\r\nimport { FoodContext } from '../Context/FoodContext';\r\nimport { convertFiltersFormat } from '../utils/utils';\r\n\r\nfunction ListFilters(props) {\r\n\r\n    const [filterAllList, setFilterList] = useState([]);\r\n    const [toFilter, setToFilter] = useState(true);\r\n    const [activeFilters, setActiveFilters] = useState({\"halal\": 'either'});\r\n\r\n\r\n    let context = useContext(FoodContext);\r\n\r\n\r\n    const getFilters = async () => {\r\n        try {\r\n            // need to add check to prevent infinite loop\r\n            \r\n            const response = await fetch(\"http://localhost:5000/filters/\");\r\n            const jsonData = await response.json();\r\n            const filters = jsonData.map((filter) => \r\n            <li id={filter}><Filter filterName={filter.filter_name} toFilter={toFilter} handleFilterSelection={handleFilterSelection}/></li>\r\n            );\r\n            setFilterList(filters);\r\n            let someObj = {}\r\n            await jsonData.forEach(async (element) => {\r\n                someObj[element.filter_name] = 'either';\r\n                // activeFilters[element.food_name] = 'either';\r\n            })\r\n            // console.log(someObj);\r\n            setActiveFilters(someObj);        \r\n            \r\n            \r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const handleFilterSelection = (filterName, value) => {\r\n        activeFilters[filterName] = value;\r\n        setActiveFilters(activeFilters);\r\n    }\r\n\r\n    const handleNoFilter = () => {\r\n        setToFilter(!toFilter);\r\n        console.log(\"toFilter set to \"+!toFilter);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const convertedActiveFilters = convertFiltersFormat(activeFilters);\r\n            const response = await fetch(\"http://localhost:5000/submit\", { method:'POST', headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}, body: JSON.stringify(convertedActiveFilters)});\r\n            let resJson = response.json();\r\n            // let foodNames = resJson.map((foodName) => console.log(foodName));\r\n            await resJson.then((data) => {\r\n                let food_names = [];\r\n                for (let food in data) {\r\n                    food_names.push(data[food].food_name);\r\n                }\r\n                console.log(food_names)\r\n            context.setFoodItem(food_names);\r\n            });\r\n        } catch (err) {\r\n            console.log(err.message)\r\n        }\r\n        \r\n    }\r\n\r\n    const foodContext = React.createContext('');\r\n\r\n    let foodFilters = []\r\n    \r\n\r\n    useEffect(() => {\r\n        getFilters();\r\n    }, [toFilter]);\r\n\r\n    let noFilterClassName = toFilter ? \"no-filter-button-unselected\" : \"no-filter-button-selected\";\r\n\r\n    return (\r\n        <div id=\"filters-interface-container\">\r\n            <button className={noFilterClassName} onClick={handleNoFilter}>No filter</button>\r\n            <ul id=\"filter-list\">\r\n                {filterAllList}\r\n            </ul>\r\n            <button className=\"submit-button\" onClick={handleSubmit}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListFilters"]},"metadata":{},"sourceType":"module"}