{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zephy\\\\OneDrive\\\\Documents\\\\Personal\\\\Coding\\\\Coding Projects\\\\WhatoEat\\\\src\\\\components\\\\ListFilters.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport Filter from './Filter';\nimport { FoodContext } from '../Context/FoodContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListFilters(props) {\n  _s();\n\n  const [filterAllList, setFilterList] = useState([]);\n  const [toFilter, setToFilter] = useState(true);\n  const [activeFilters, setActiveFilters] = useState({\n    \"filters\": [\"soup\", \"halal\"],\n    \"values\": [false, false]\n  });\n  const [activeFilters2, setActiveFilters2] = useState({});\n  const [possibleFoodItems, setPossibleFoodItems] = useState([]);\n  let context = useContext(FoodContext);\n\n  const getFilters = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/filters/\");\n      const jsonData = await response.json();\n      const filters = jsonData.map(filter => /*#__PURE__*/_jsxDEV(\"li\", {\n        id: filter,\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          filterName: filter.filter_name,\n          toFilter: toFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)); // jsonData.forEach(async (element) => {\n      //     activeFilters2[element.food_name] = 'either';\n      // })\n\n      return filters; // setFilterList(filters);\n      // setActiveFilters2(activeFilters2);\n      // console.log(filterAllList)\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const setActiveFilter = () => {\n    setActiveFilters2({});\n  };\n\n  const handleNoFilter = () => {\n    setToFilter(!toFilter);\n    console.log(\"toFilter set to \" + !toFilter);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      console.log(activeFilters); // console.log(activeFilters)\n\n      const response = await fetch(\"http://localhost:5000/submit\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(activeFilters)\n      });\n      let resJson = response.json(); // let foodNames = resJson.map((foodName) => console.log(foodName));\n\n      resJson.then(data => {\n        let food_names = [];\n\n        for (let food in data) {\n          food_names.push(data[food].food_name);\n        }\n\n        setPossibleFoodItems(food_names);\n        context.setFoodItem(possibleFoodItems);\n        console.log(possibleFoodItems);\n      });\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  const foodContext = /*#__PURE__*/React.createContext('');\n  let foodFilters = [];\n  useEffect(() => {\n    [foodFilters] = getFilters();\n    console.log(\"re-rendered\");\n  }, [filterAllList]);\n  let noFilterClassName = toFilter ? \"no-filter-button-unselected\" : \"no-filter-button-selected\";\n  console.log(foodFilters);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"filters-interface-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: noFilterClassName,\n      onClick: handleNoFilter,\n      children: \"No filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"filter-list\",\n      children: foodFilters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListFilters, \"XovgP202XGflZCgLPsuibXCKV/Q=\");\n\n_c = ListFilters;\nexport default ListFilters;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListFilters\");","map":{"version":3,"sources":["C:/Users/Zephy/OneDrive/Documents/Personal/Coding/Coding Projects/WhatoEat/src/components/ListFilters.js"],"names":["React","useContext","useEffect","useRef","useState","Filter","FoodContext","ListFilters","props","filterAllList","setFilterList","toFilter","setToFilter","activeFilters","setActiveFilters","activeFilters2","setActiveFilters2","possibleFoodItems","setPossibleFoodItems","context","getFilters","response","fetch","jsonData","json","filters","map","filter","filter_name","err","console","error","setActiveFilter","handleNoFilter","log","handleSubmit","method","headers","body","JSON","stringify","resJson","then","data","food_names","food","push","food_name","setFoodItem","message","foodContext","createContext","foodFilters","noFilterClassName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport Filter from './Filter';\r\nimport { FoodContext } from '../Context/FoodContext';\r\n\r\nfunction ListFilters(props) {\r\n\r\n    const [filterAllList, setFilterList] = useState([]);\r\n    const [toFilter, setToFilter] = useState(true);\r\n    const [activeFilters, setActiveFilters] = useState({ \"filters\": [\"soup\", \"halal\"], \"values\": [false, false] });\r\n    const [activeFilters2, setActiveFilters2] = useState({})\r\n    const [possibleFoodItems, setPossibleFoodItems] = useState([])\r\n\r\n\r\n    let context = useContext(FoodContext);\r\n\r\n\r\n    const getFilters = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/filters/\");\r\n            const jsonData = await response.json();\r\n            const filters = jsonData.map((filter) => \r\n            <li id={filter}><Filter filterName={filter.filter_name} toFilter={toFilter}/></li>\r\n            );\r\n            // jsonData.forEach(async (element) => {\r\n            //     activeFilters2[element.food_name] = 'either';\r\n            // })\r\n            return filters\r\n            // setFilterList(filters);\r\n            // setActiveFilters2(activeFilters2);\r\n            // console.log(filterAllList)\r\n            \r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n\r\n    const setActiveFilter = () => {\r\n        setActiveFilters2({})\r\n    }\r\n\r\n    const handleNoFilter = () => {\r\n        setToFilter(!toFilter);\r\n        console.log(\"toFilter set to \"+!toFilter);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            console.log(activeFilters)\r\n            // console.log(activeFilters)\r\n            const response = await fetch(\"http://localhost:5000/submit\", { method:'POST', headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}, body: JSON.stringify(activeFilters)});\r\n            let resJson = response.json();\r\n            // let foodNames = resJson.map((foodName) => console.log(foodName));\r\n            resJson.then((data) => {\r\n                let food_names = [];\r\n                for (let food in data) {\r\n                    food_names.push(data[food].food_name);\r\n                }\r\n                setPossibleFoodItems(food_names);\r\n                context.setFoodItem(possibleFoodItems);\r\n                console.log(possibleFoodItems)\r\n            });\r\n        } catch (err) {\r\n            console.log(err.message)\r\n        }\r\n        \r\n    }\r\n\r\n    const foodContext = React.createContext('');\r\n\r\n    let foodFilters = []\r\n    \r\n\r\n    useEffect(() => {\r\n        [foodFilters] = getFilters();\r\n        console.log(\"re-rendered\")\r\n    }, [filterAllList]);\r\n\r\n    let noFilterClassName = toFilter ? \"no-filter-button-unselected\" : \"no-filter-button-selected\";\r\n    console.log(foodFilters)\r\n\r\n    return (\r\n        <div id=\"filters-interface-container\">\r\n            <button className={noFilterClassName} onClick={handleNoFilter}>No filter</button>\r\n            <ul id=\"filter-list\">\r\n                {foodFilters}\r\n            </ul>\r\n            <button className=\"submit-button\" onClick={handleSubmit}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListFilters"]},"metadata":{},"sourceType":"module"}